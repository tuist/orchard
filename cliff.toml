# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/tuist/orchard/releases/tag/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

### Details

{% for group, commits in commits | group_by(attribute="group") %}
    #### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | upper_first | trim }} ([{{ commit.id | truncate(length=7, end="") }}](https://github.com/tuist/orchard/commit/{{ commit.id }}))
        {%- if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
        {%- if commit.github.pr_number %} in #{{ commit.github.pr_number }}{%- endif %}
    {%- endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 -%}
### New Contributors
{%- for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
* @{{ contributor.username }} made their first contribution
{%- if contributor.pr_number %} in #{{ contributor.pr_number }}{%- endif %}
{%- endfor -%}
{%- endif -%}

"""

# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/tuist/orchard/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "⚡ Features" },
    { message = "^fix", group = "🐛 Bug Fixes" },
    { message = "^doc", group = "📚 Documentation" },
    { message = "^perf", group = "🚀 Performance" },
    { message = "^refactor", group = "🔨 Refactor" },
    { message = "^style", group = "🎨 Styling" },
    { message = "^test", group = "🧪 Testing" },
    { message = "^chore|^ci", group = "⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "🔐 Security" },
    { message = "^revert", group = "◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[bump]
# Whether to create a major release when there are breaking changes
breaking_always_bumps_major = true
# The pattern to use for creating the release version
custom_major_increment_regex = "feat!:"
custom_minor_increment_regex = "feat:"

[remote.github]
# The GitHub repository owner
owner = "tuist"
# The GitHub repository name
repo = "orchard"

# The tag to start from when generating the changelog
# This should be the initial published version
tag_pattern = "v?[0-9].*"
skip_tags = "0.1.0"
ignore_tags = ""
date_order = false

# Set the initial tag
initial_tag = "0.1.0"